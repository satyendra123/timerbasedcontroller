#lets suppose i have a barrier. i want there should be four button set, up, down, ok button. when i click on the set button it means that we can now start setting the time. up button will increase the 1 second time, down button will decrease the 1 sec time and when i click on the ok button means time is saved.
# lets suppose mai barrier ka controller banana chahta hu jisme ki barrier jab up ho to after 3 seconds down relay will be triggered and boom barrier will be down. but if boom barrier is already down then the down relay will not be triggered
# so mai four button ki jagah par four wire connect kar lunga testing krne ke liye aur touch kar karke dekhunga time increase aur decrease karke ki aisa ho bhi rha hai ya nahi
# i also uses a file to store the settime data in a file and retrieve it from here because when power goes off and comes again it should work as previous set timing. so i have import the os and json for creating the file and store the data in it


from machine import Pin, Timer
import time
import ujson
import uos

# Define pin numbers for buttons and relays
SET_BUTTON_PIN = 2
UP_BUTTON_PIN = 0
DOWN_BUTTON_PIN = 4
OK_BUTTON_PIN = 5

BARRIER_UP_BUTTON = 25
BARRIER_DOWN_BUTTON = 26

UP_RELAY_PIN = 12
DOWN_RELAY_PIN = 13

# Define initial barrier state and timer duration
barrier_up = False
timer_duration = 0
auto_down_time = 10  # Auto down time in seconds

# Initialize buttons
set_button = Pin(SET_BUTTON_PIN, Pin.IN, Pin.PULL_UP)
up_button = Pin(UP_BUTTON_PIN, Pin.IN, Pin.PULL_UP)
down_button = Pin(DOWN_BUTTON_PIN, Pin.IN, Pin.PULL_UP)
ok_button = Pin(OK_BUTTON_PIN, Pin.IN, Pin.PULL_UP)

barrier_up_button = Pin(BARRIER_UP_BUTTON, Pin.IN, Pin.PULL_UP)
barrier_down_button = Pin(BARRIER_DOWN_BUTTON, Pin.IN, Pin.PULL_UP)

# Initialize relays
up_relay = Pin(UP_RELAY_PIN, Pin.OUT)
down_relay = Pin(DOWN_RELAY_PIN, Pin.OUT)

# Set relays to initial state (barrier down)
up_relay.off()
down_relay.on()

# Define file name for storing timer duration
TIMER_FILE = 'timer.json'

# Load previous timer duration from file
try:
    with open(TIMER_FILE, 'r') as f:
        timer_duration = ujson.load(f)
except OSError:
    # File does not exist or unable to open
    pass

# Initialize timer if not loaded from file
if timer_duration <= 0:
    timer_duration = 0

# Timer callback function to close the barrier
def close_barrier(timer):
    global barrier_up
    if barrier_up:
        up_relay.off()
        down_relay.on()
        barrier_up = False
        print("Barrier is down")

# Timer for auto-down functionality
auto_down_timer = Timer(-1)

# Enter main loop
while True:
    # Check if set button is pressed
    if not set_button.value():
        print("Entering set mode...")
        # Enter set mode
        while ok_button.value():
            # Check if up button is pressed
            if not up_button.value():
                # Increase timer duration by 1 second
                timer_duration += 1000
                print(f"Timer duration: {timer_duration} ms")
                time.sleep(0.2)  # Debounce delay

            # Check if down button is pressed
            if not down_button.value() and timer_duration > 0:
                # Decrease timer duration by 1 second (minimum 0)
                timer_duration -= 1000
                print(f"Timer duration: {timer_duration} ms")
                time.sleep(0.2)  # Debounce delay

            # Display timer duration (e.g., using LEDs or a display)

        # Save timer duration to file when OK button is pressed
        if not ok_button.value():
            with open(TIMER_FILE, 'w') as f:
                ujson.dump(timer_duration, f)
                print(f"Timer duration saved to file: {timer_duration} ms")
            time.sleep(0.2)  # Debounce delay

    # Check if barrier up button is pressed (to start the timer and raise barrier)
    if not barrier_up_button.value() and timer_duration > 0:
        # Start timer and raise barrier after timer duration
        barrier_up = True
        up_relay.on()  # Raise barrier
        down_relay.off()
        print("Barrier is up")
        auto_down_timer.init(period=auto_down_time * 1000, mode=Timer.ONE_SHOT, callback=close_barrier)
        time.sleep_ms(timer_duration)
        if barrier_up:
            up_relay.off()  # Lower barrier
            down_relay.on()
            barrier_up = False
            print("Barrier is down")

    # Check if barrier is up and no timer is set (manual control)
    if barrier_up and timer_duration == 0:
        # Check if down button is pressed
        if not barrier_down_button.value():
            # Lower barrier
            up_relay.off()
            down_relay.on()
            barrier_up = False
            print("Barrier is manually down")

    time.sleep(0.05)

#example-2 complete code with ir and loop. 
from machine import Pin, Timer
import time
import ujson

# Define pin numbers for buttons, relays, and sensors
SET_BUTTON_PIN = 2
UP_BUTTON_PIN = 0
DOWN_BUTTON_PIN = 4
OK_BUTTON_PIN = 5

BARRIER_UP_BUTTON = 25
BARRIER_DOWN_BUTTON = 26

UP_RELAY_PIN = 12
DOWN_RELAY_PIN = 13

LOOP_SENSOR_PIN = 14
IR_SENSOR_PIN = 27

# Define initial barrier state and timer duration
barrier_up = False
timer_duration = 0
auto_down_time = 10  # Auto down time in seconds

# Initialize buttons
set_button = Pin(SET_BUTTON_PIN, Pin.IN, Pin.PULL_UP)
up_button = Pin(UP_BUTTON_PIN, Pin.IN, Pin.PULL_UP)
down_button = Pin(DOWN_BUTTON_PIN, Pin.IN, Pin.PULL_UP)
ok_button = Pin(OK_BUTTON_PIN, Pin.IN, Pin.PULL_UP)

barrier_up_button = Pin(BARRIER_UP_BUTTON, Pin.IN, Pin.PULL_UP)
barrier_down_button = Pin(BARRIER_DOWN_BUTTON, Pin.IN, Pin.PULL_UP)

# Initialize relays
up_relay = Pin(UP_RELAY_PIN, Pin.OUT)
down_relay = Pin(DOWN_RELAY_PIN, Pin.OUT)

# Initialize sensors
loop_sensor = Pin(LOOP_SENSOR_PIN, Pin.IN, Pin.PULL_UP)
ir_sensor = Pin(IR_SENSOR_PIN, Pin.IN, Pin.PULL_UP)

# Set relays to initial state (barrier down)
up_relay.off()
down_relay.on()

# Define file name for storing timer duration
TIMER_FILE = 'timer.json'

# Load previous timer duration from file
try:
    with open(TIMER_FILE, 'r') as f:
        timer_duration = ujson.load(f)
except OSError:
    # File does not exist or unable to open
    pass

# Initialize timer if not loaded from file
if timer_duration <= 0:
    timer_duration = 0

# Timer callback function to close the barrier
def close_barrier(timer):
    global barrier_up
    if barrier_up:
        up_relay.off()
        down_relay.on()
        barrier_up = False
        print("Barrier is down")

# Timer for auto-down functionality
auto_down_timer = Timer(-1)

# Enter main loop
while True:
    # Check if set button is pressed
    if not set_button.value():
        print("Entering set mode...")
        # Enter set mode
        while ok_button.value():
            # Check if up button is pressed
            if not up_button.value():
                # Increase timer duration by 1 second
                timer_duration += 1000
                print(f"Timer duration: {timer_duration} ms")
                time.sleep(0.2)  # Debounce delay

            # Check if down button is pressed
            if not down_button.value() and timer_duration > 0:
                # Decrease timer duration by 1 second (minimum 0)
                timer_duration -= 1000
                print(f"Timer duration: {timer_duration} ms")
                time.sleep(0.2)  # Debounce delay

            # Display timer duration (e.g., using LEDs or a display)

        # Save timer duration to file when OK button is pressed
        if not ok_button.value():
            with open(TIMER_FILE, 'w') as f:
                ujson.dump(timer_duration, f)
                print(f"Timer duration saved to file: {timer_duration} ms")
            time.sleep(0.2)  # Debounce delay

    # Check if barrier up button is pressed (to start the timer and raise barrier)
    if not barrier_up_button.value() and timer_duration > 0:
        # Start timer and raise barrier after timer duration
        barrier_up = True
        up_relay.on()  # Raise barrier
        down_relay.off()
        print("Barrier is up")
        auto_down_timer.init(period=auto_down_time * 1000, mode=Timer.ONE_SHOT, callback=close_barrier)
        time.sleep_ms(timer_duration)
        if barrier_up:
            up_relay.off()  # Lower barrier
            down_relay.on()
            barrier_up = False
            print("Barrier is down")

    # Check if barrier is up and no timer is set (manual control)
    if barrier_up and timer_duration == 0:
        # Check if down button is pressed
        if not barrier_down_button.value():
            # Lower barrier
            up_relay.off()
            down_relay.on()
            barrier_up = False
            print("Barrier is manually down")

    # Check loop sensor and IR sensor to automatically lower barrier when conditions are met
    if not loop_sensor.value() and not ir_sensor.value() and not barrier_up and timer_duration > 0:
        # Lower barrier
        up_relay.off()
        down_relay.on()
        barrier_up = False
        print("No vehicle or IR detected, lowering barrier")

    time.sleep(0.05)


#EXAMPLE-2 i have made the menus and submenus based code. i have 5 jumper wires. menu(pin2), up(pin0), down(pin4), ok(pin5), gnd(esp32gnd). this will work as a button when i touch the anyjumper wire with the gnd. 
#when i click on the menu button i will enter into the menu option and first item will be displayed. and when i click on the up button then i will move in forward direction and when i click on the down button i will move backward options and when i click on the ok button i will enter into the submenus and after when i set the timer and click on the ok then the timer data will be saved 
# and automatically come back to menus option. and when i click on the menus button again then i will exited from the menus
from machine import Pin
import time
import json

# Define GPIO pins for the buttons
button_menu = Pin(2, Pin.IN, Pin.PULL_UP)
button_up = Pin(0, Pin.IN, Pin.PULL_UP)
button_down = Pin(4, Pin.IN, Pin.PULL_UP)
button_ok = Pin(5, Pin.IN, Pin.PULL_UP)
button_exit = Pin(26, Pin.IN, Pin.PULL_UP)

# Define the menu and submenu structure
menu = ["F1", "F2", "F3", "F4", "F5", "F6"]

submenu = {
    "F1": {"1": {"name": "option1", "timer": 0}, "2": {"name": "option2", "timer": 0}, "3": {"name": "option3", "timer": 0}, "4": {"name": "option4", "timer": 0}, "5": {"name": "option5", "timer": 0}},
    "F2": {"1": {"name": "option1", "timer": 0}, "2": {"name": "option2", "timer": 0}, "3": {"name": "option3", "timer": 0}, "4": {"name": "option4", "timer": 0}, "5": {"name": "option5", "timer": 0}},
    "F3": {"1": {"name": "option1", "timer": 0}, "2": {"name": "option2", "timer": 0}, "3": {"name": "option3", "timer": 0}, "4": {"name": "option4", "timer": 0}, "5": {"name": "option5", "timer": 0}},
    "F4": {"1": {"name": "option1", "timer": 0}, "2": {"name": "option2", "timer": 0}, "3": {"name": "option3", "timer": 0}, "4": {"name": "option4", "timer": 0}, "5": {"name": "option5", "timer": 0}},
    "F5": {"1": {"name": "option1", "timer": 0}, "2": {"name": "option2", "timer": 0}, "3": {"name": "option3", "timer": 0}, "4": {"name": "option4", "timer": 0}, "5": {"name": "option5", "timer": 0}},
}

current_menu_index = 0
current_submenu_index = 1
in_submenu = False
setting_timer = False
menu_active = False

def save_timers():
    with open('timers.txt', 'w') as f:
        json.dump(submenu, f)

def load_timers():
    global submenu
    try:
        with open('timers.txt', 'r') as f:
            submenu = json.load(f)
    except OSError:
        save_timers()  # Create the file if it doesn't exist

def print_current_menu(index):
    print(f"Current Menu: {menu[index]}")

def print_current_submenu(menu_name, index):
    submenu_items = list(submenu[menu_name].items())
    print(f"Submenu for {menu_name}: {submenu_items[index - 1][0]}: {submenu_items[index - 1][1]['name']} (Timer: {submenu_items[index - 1][1]['timer']} sec)")

def button_pressed(pin):
    return not pin.value()

load_timers()

while True:
    if button_pressed(button_menu):
        if menu_active:
            menu_active = False
            in_submenu = False
            print("Exited Menu.")
        else:
            menu_active = True
            print_current_menu(current_menu_index)
        time.sleep(0.3)  # Debounce delay

    if menu_active:
        if button_pressed(button_exit):
            if setting_timer:
                setting_timer = False
                print_current_submenu(menu[current_menu_index], current_submenu_index)
            elif in_submenu:
                in_submenu = False
                print_current_menu(current_menu_index)
            else:
                menu_active = False
                print("Menu deactivated.")
            time.sleep(0.3)  # Debounce delay

        elif button_pressed(button_up):
            if setting_timer:
                submenu[menu[current_menu_index]][str(current_submenu_index)]['timer'] += 1
                print(f"Set Timer: {submenu[menu[current_menu_index]][str(current_submenu_index)]['timer']} sec")
            elif in_submenu:
                current_submenu_index = (current_submenu_index % len(submenu[menu[current_menu_index]])) + 1
                print_current_submenu(menu[current_menu_index], current_submenu_index)
            else:
                current_menu_index = (current_menu_index + 1) % len(menu)
                print_current_menu(current_menu_index)
            time.sleep(0.3)  # Debounce delay

        elif button_pressed(button_down):
            if setting_timer:
                submenu[menu[current_menu_index]][str(current_submenu_index)]['timer'] = max(0, submenu[menu[current_menu_index]][str(current_submenu_index)]['timer'] - 1)
                print(f"Set Timer: {submenu[menu[current_menu_index]][str(current_submenu_index)]['timer']} sec")
            elif in_submenu:
                current_submenu_index = (current_submenu_index - 2) % len(submenu[menu[current_menu_index]]) + 1
                print_current_submenu(menu[current_menu_index], current_submenu_index)
            else:
                current_menu_index = (current_menu_index - 1) % len(menu)
                print_current_menu(current_menu_index)
            time.sleep(0.3)  # Debounce delay

        elif button_pressed(button_ok):
            if setting_timer:
                setting_timer = False
                save_timers()
                print("Timer saved.")
                print_current_menu(current_menu_index)
            elif in_submenu:
                setting_timer = True
                print(f"Set Timer: {submenu[menu[current_menu_index]][str(current_submenu_index)]['timer']} sec")
            else:
                in_submenu = True
                current_submenu_index = 1
                print_current_submenu(menu[current_menu_index], current_submenu_index)
            time.sleep(0.3)  # Debounce delay
'''

